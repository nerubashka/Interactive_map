import {
  Image_default as Image_default2,
  defaultImageLoadFunction
} from "./chunk-LGZ6M6P3.js";
import {
  Image_default
} from "./chunk-N7T7T55P.js";
import {
  get
} from "./chunk-DRTCU4B3.js";
import {
  getHeight,
  getWidth,
  intersects
} from "./chunk-WQSEWMRT.js";
import {
  ImageState_default
} from "./chunk-5TDNKDLD.js";
import {
  createCanvasContext2D
} from "./chunk-YZOGOUHU.js";
import {
  EventType_default
} from "./chunk-X2MHPXID.js";

// node_modules/ol/source/ImageStatic.js
var Static = class extends Image_default2 {
  constructor(options) {
    const crossOrigin = options.crossOrigin !== void 0 ? options.crossOrigin : null;
    const imageLoadFunction = options.imageLoadFunction !== void 0 ? options.imageLoadFunction : defaultImageLoadFunction;
    super({
      attributions: options.attributions,
      interpolate: options.interpolate,
      projection: get(options.projection)
    });
    this.url_ = options.url;
    this.imageExtent_ = options.imageExtent;
    this.image_ = new Image_default(
      this.imageExtent_,
      void 0,
      1,
      this.url_,
      crossOrigin,
      imageLoadFunction,
      createCanvasContext2D(1, 1)
    );
    this.imageSize_ = options.imageSize ? options.imageSize : null;
    this.image_.addEventListener(
      EventType_default.CHANGE,
      this.handleImageChange.bind(this)
    );
  }
  getImageExtent() {
    return this.imageExtent_;
  }
  getImageInternal(extent, resolution, pixelRatio, projection) {
    if (intersects(extent, this.image_.getExtent())) {
      return this.image_;
    }
    return null;
  }
  getUrl() {
    return this.url_;
  }
  handleImageChange(evt) {
    if (this.image_.getState() == ImageState_default.LOADED) {
      const imageExtent = this.image_.getExtent();
      const image = this.image_.getImage();
      let imageWidth, imageHeight;
      if (this.imageSize_) {
        imageWidth = this.imageSize_[0];
        imageHeight = this.imageSize_[1];
      } else {
        imageWidth = image.width;
        imageHeight = image.height;
      }
      const extentWidth = getWidth(imageExtent);
      const extentHeight = getHeight(imageExtent);
      const xResolution = extentWidth / imageWidth;
      const yResolution = extentHeight / imageHeight;
      let targetWidth = imageWidth;
      let targetHeight = imageHeight;
      if (xResolution > yResolution) {
        targetWidth = Math.round(extentWidth / yResolution);
      } else {
        targetHeight = Math.round(extentHeight / xResolution);
      }
      if (targetWidth !== imageWidth || targetHeight !== imageHeight) {
        const context = createCanvasContext2D(targetWidth, targetHeight);
        if (!this.getInterpolate()) {
          context.imageSmoothingEnabled = false;
        }
        const canvas = context.canvas;
        context.drawImage(
          image,
          0,
          0,
          imageWidth,
          imageHeight,
          0,
          0,
          canvas.width,
          canvas.height
        );
        this.image_.setImage(canvas);
      }
    }
    super.handleImageChange(evt);
  }
};
var ImageStatic_default = Static;

export {
  ImageStatic_default
};
//# sourceMappingURL=chunk-B3BGYGND.js.map
