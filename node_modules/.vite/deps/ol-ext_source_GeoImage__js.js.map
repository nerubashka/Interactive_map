{
  "version": 3,
  "sources": ["../../ol-ext/source/GeoImage.js"],
  "sourcesContent": ["/*\tCopyright (c) 2015 Jean-Marc VIGLINO, \r\n  released under the CeCILL-B license (French BSD license)\r\n  (http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.txt).\r\n  \r\n  ol_source_GeoImage is a layer source with georeferencement to place it on a map.\r\n*/\r\n/** @typedef {Object} GeoImageOptions\r\n * @property {url} url url of the static image\r\n * @property {image} image the static image, if not provided, use url to load an image\r\n * @property {ol.Coordinate} imageCenter coordinate of the center of the image\r\n * @property {ol.Size|number} imageScale [scalex, scaley] of the image\r\n * @property {number} imageRotate angle of the image in radian, default 0\r\n * @property {ol.Extent} imageCrop of the image to be show (in the image) default: [0,0,imageWidth,imageHeight]\r\n * @property {Array.<ol.Coordinate>} imageMask linestring to mask the image on the map\r\n */\r\n\r\nimport ol_source_ImageCanvas from 'ol/source/ImageCanvas.js'\r\nimport ol_geom_Polygon from 'ol/geom/Polygon.js'\r\nimport {boundingExtent as ol_extent_boundingExtent} from 'ol/extent.js'\r\nimport {fromExtent as ol_geom_Polygon_fromExtent} from 'ol/geom/Polygon.js'\r\n\r\n/** Layer source with georeferencement to place it on a map\r\n * @constructor \r\n * @extends {ol_source_ImageCanvas}\r\n * @param {GeoImageOptions} options\r\n */\r\nvar ol_source_GeoImage = class olsourceGeoImage extends ol_source_ImageCanvas {\r\n  constructor(opt_options) {\r\n    var options = {\r\n      attributions: opt_options.attributions,\r\n      logo: opt_options.logo,\r\n      projection: opt_options.projection\r\n    }\r\n    // Draw image on canvas\r\n    options.canvasFunction = function (extent, resolution, pixelRatio, size) {\r\n      return this.calculateImage(extent, resolution, pixelRatio, size)\r\n    }\r\n\r\n    super(options)\r\n\r\n    // options.projection = opt_options.projection;\r\n    // Load Image\r\n    this._image = (opt_options.image ? opt_options.image : new Image)\r\n    this._image.crossOrigin = opt_options.crossOrigin // 'anonymous';\r\n\r\n    // Show image on load\r\n    this._image.onload = function () {\r\n      this.setCrop(this.crop)\r\n      this.changed()\r\n    }.bind(this)\r\n    if (!opt_options.image) this._image.src = opt_options.url\r\n\r\n    // Coordinate of the image center \r\n    this.center = opt_options.imageCenter\r\n    // Image scale \r\n    this.setScale(opt_options.imageScale)\r\n    // Rotation of the image\r\n    this.rotate = opt_options.imageRotate ? opt_options.imageRotate : 0\r\n    // Crop of the image\r\n    this.crop = opt_options.imageCrop\r\n    // Mask of the image\r\n    this.mask = opt_options.imageMask\r\n    // Crop\r\n    this.setCrop(this.crop)\r\n\r\n    // Calculate extent on change\r\n    this.on('change', function () {\r\n      this.set('extent', this.calculateExtent())\r\n    }.bind(this))\r\n  }\r\n  /** calculate image at extent / resolution\r\n   * @param {ol/extent/Extent} extent\r\n   * @param {number} resolution\r\n   * @param {number} pixelRatio\r\n   * @param {ol/size/Size} size\r\n   * @return {HTMLCanvasElement}\r\n   */\r\n  calculateImage(extent, resolution, pixelRatio, size) {\r\n    if (!this.center)\r\n      return\r\n    var canvas = document.createElement('canvas')\r\n    canvas.width = size[0]\r\n    canvas.height = size[1]\r\n    var ctx = canvas.getContext('2d')\r\n\r\n    if (!this._imageSize)\r\n      return canvas\r\n    // transform coords to pixel\r\n    function tr(xy) {\r\n      return [\r\n        (xy[0] - extent[0]) / (extent[2] - extent[0]) * size[0],\r\n        (xy[1] - extent[3]) / (extent[1] - extent[3]) * size[1]\r\n      ]\r\n    }\r\n    // Clipping mask\r\n    if (this.mask) {\r\n      ctx.beginPath()\r\n      var p = tr(this.mask[0])\r\n      ctx.moveTo(p[0], p[1])\r\n      for (var i = 1; i < this.mask.length; i++) {\r\n        p = tr(this.mask[i])\r\n        ctx.lineTo(p[0], p[1])\r\n      }\r\n      ctx.clip()\r\n    }\r\n\r\n    // Draw\r\n    var pixel = tr(this.center)\r\n    var dx = (this._image.naturalWidth / 2 - this.crop[0]) * this.scale[0] / resolution * pixelRatio\r\n    var dy = (this._image.naturalHeight / 2 - this.crop[1]) * this.scale[1] / resolution * pixelRatio\r\n    var sx = this._imageSize[0] * this.scale[0] / resolution * pixelRatio\r\n    var sy = this._imageSize[1] * this.scale[1] / resolution * pixelRatio\r\n\r\n    ctx.translate(pixel[0], pixel[1])\r\n    if (this.rotate)\r\n      ctx.rotate(this.rotate)\r\n    ctx.drawImage(this._image, this.crop[0], this.crop[1], this._imageSize[0], this._imageSize[1], -dx, -dy, sx, sy)\r\n    return canvas\r\n  }\r\n  /**\r\n   * Get coordinate of the image center.\r\n   * @return {ol.Coordinate} coordinate of the image center.\r\n   * @api stable\r\n   */\r\n  getCenter() {\r\n    return this.center\r\n  }\r\n  /**\r\n   * Set coordinate of the image center.\r\n   * @param {ol.Coordinate} coordinate of the image center.\r\n   * @api stable\r\n   */\r\n  setCenter(center) {\r\n    this.center = center\r\n    this.changed()\r\n  }\r\n  /**\r\n   * Get image scale.\r\n   * @return {ol.size} image scale (along x and y axis).\r\n   * @api stable\r\n   */\r\n  getScale() {\r\n    return this.scale\r\n  }\r\n  /**\r\n   * Set image scale.\r\n   * @param {ol.size|Number} image scale (along x and y axis or both).\r\n   * @api stable\r\n   */\r\n  setScale(scale) {\r\n    switch (typeof (scale)) {\r\n      case 'number':\r\n        scale = [scale, scale]\r\n        break\r\n      case 'object':\r\n        if (scale.length != 2)\r\n          return\r\n        break\r\n      default: return\r\n    }\r\n    this.scale = scale\r\n    this.changed()\r\n  }\r\n  /**\r\n   * Get image rotation.\r\n   * @return {Number} rotation in radian.\r\n   * @api stable\r\n   */\r\n  getRotation() {\r\n    return this.rotate\r\n  }\r\n  /**\r\n   * Set image rotation.\r\n   * @param {Number} rotation in radian.\r\n   * @api stable\r\n   */\r\n  setRotation(angle) {\r\n    this.rotate = angle\r\n    this.changed()\r\n  }\r\n  /**\r\n   * Get the image.\r\n   * @api stable\r\n   */\r\n  getGeoImage() {\r\n    return this._image\r\n  }\r\n  /**\r\n   * Get image crop extent.\r\n   * @return {ol.extent} image crop extent.\r\n   * @api stable\r\n   */\r\n  getCrop() {\r\n    return this.crop\r\n  }\r\n  /**\r\n   * Set image mask.\r\n   * @param {ol.geom.LineString} coords of the mask\r\n   * @api stable\r\n   */\r\n  setMask(mask) {\r\n    this.mask = mask\r\n    this.changed()\r\n  }\r\n  /**\r\n   * Get image mask.\r\n   * @return {ol.geom.LineString} coords of the mask\r\n   * @api stable\r\n   */\r\n  getMask() {\r\n    return this.mask\r\n  }\r\n  /**\r\n   * Set image crop extent.\r\n   * @param {ol.extent|Number} image crop extent or a number to crop from original size.\r\n   * @api stable\r\n   */\r\n  setCrop(crop) {\r\n    // Image not loaded => get it latter\r\n    if (!this._image.naturalWidth) {\r\n      this.crop = crop\r\n      return\r\n    }\r\n    if (crop) {\r\n      switch (typeof (crop)) {\r\n        case 'number':\r\n          crop = [crop, crop, this._image.naturalWidth - crop, this._image.naturalHeight - crop]\r\n          break\r\n        case 'object':\r\n          if (crop.length != 4)\r\n            return\r\n          break\r\n        default: return\r\n      }\r\n      crop = ol_extent_boundingExtent([[crop[0], crop[1]], [crop[2], crop[3]]])\r\n      this.crop = [Math.max(0, crop[0]), Math.max(0, crop[1]), Math.min(this._image.naturalWidth, crop[2]), Math.min(this._image.naturalHeight, crop[3])]\r\n    }\r\n    else\r\n      this.crop = [0, 0, this._image.naturalWidth, this._image.naturalHeight]\r\n    if (this.crop[2] <= this.crop[0])\r\n      this.crop[2] = this.crop[0] + 1\r\n    if (this.crop[3] <= this.crop[1])\r\n      this.crop[3] = this.crop[1] + 1\r\n    this._imageSize = [this.crop[2] - this.crop[0], this.crop[3] - this.crop[1]]\r\n    this.changed()\r\n  }\r\n  /** Get the extent of the source.\r\n   * @param {module:ol/extent~Extent} extent If provided, no new extent will be created. Instead, that extent's coordinates will be overwritten.\r\n   * @return {ol.extent}\r\n   */\r\n  getExtent(opt_extent) {\r\n    var ext = this.get('extent')\r\n    if (!ext)\r\n      ext = this.calculateExtent()\r\n    if (opt_extent) {\r\n      for (var i = 0; i < opt_extent.length; i++) {\r\n        opt_extent[i] = ext[i]\r\n      }\r\n    }\r\n    return ext\r\n  }\r\n  /** Calculate the extent of the source image.\r\n   * @param {boolean} usemask return the mask extent, default return the image extent\r\n   * @return {ol.extent}\r\n   */\r\n  calculateExtent(usemask) {\r\n    var polygon\r\n    if (usemask !== false && this.getMask()) {\r\n      polygon = new ol_geom_Polygon([this.getMask()])\r\n    } else {\r\n      var center = this.getCenter()\r\n      var scale = this.getScale()\r\n      var width = this.getGeoImage().width * scale[0]\r\n      var height = this.getGeoImage().height * scale[1]\r\n      var extent = ol_extent_boundingExtent([\r\n        [center[0] - width / 2, center[1] - height / 2],\r\n        [center[0] + width / 2, center[1] + height / 2]\r\n      ])\r\n      polygon = ol_geom_Polygon_fromExtent(extent)\r\n      polygon.rotate(-this.getRotation(), center)\r\n    }\r\n    var ext = polygon.getExtent()\r\n    return ext\r\n  }\r\n}\r\n\r\nexport default ol_source_GeoImage\r\n"],
  "mappings": "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",
  "names": []
}
